//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.4

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "ip_port"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub id: i64,
    pub ip_address_id: Option<i64>,
    pub protocol: Option<String>,
    pub port_id: Option<String>,
    pub state: Option<String>,
    pub created_at: Option<DateTimeWithTimeZone>,
    pub updated_at: Option<DateTimeWithTimeZone>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    IpAddressId,
    Protocol,
    PortId,
    State,
    CreatedAt,
    UpdatedAt,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i64;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    IpAddress,
    IpPortState,
    IpService,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::BigInteger.def(),
            Self::IpAddressId => ColumnType::BigInteger.def().null(),
            Self::Protocol => ColumnType::Text.def().null(),
            Self::PortId => ColumnType::Text.def().null(),
            Self::State => ColumnType::Text.def().null(),
            Self::CreatedAt => ColumnType::TimestampWithTimeZone.def().null(),
            Self::UpdatedAt => ColumnType::TimestampWithTimeZone.def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::IpAddress => Entity::belongs_to(super::ip_address::Entity)
                .from(Column::IpAddressId)
                .to(super::ip_address::Column::Id)
                .into(),
            Self::IpPortState => Entity::has_many(super::ip_port_state::Entity).into(),
            Self::IpService => Entity::has_many(super::ip_service::Entity).into(),
        }
    }
}

impl Related<super::ip_address::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::IpAddress.def()
    }
}

impl Related<super::ip_port_state::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::IpPortState.def()
    }
}

impl Related<super::ip_service::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::IpService.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
