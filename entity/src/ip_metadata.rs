//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.4

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "ip_metadata"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub id: i32,
    pub ip_main_id: Option<i32>,
    pub scanner: Option<String>,
    pub args: Option<String>,
    pub start: Option<String>,
    pub version: Option<String>,
    pub xml_output_version: Option<String>,
    pub scan_info: Option<String>,
    pub verbose: Option<String>,
    pub debugging: Option<String>,
    pub run_stats: Option<String>,
    pub created_at: Option<DateTimeWithTimeZone>,
    pub updated_at: Option<DateTimeWithTimeZone>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    IpMainId,
    Scanner,
    Args,
    Start,
    Version,
    XmlOutputVersion,
    ScanInfo,
    Verbose,
    Debugging,
    RunStats,
    CreatedAt,
    UpdatedAt,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    IpAddress,
    IpMain,
    IpStats,
    IpTimes,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Integer.def(),
            Self::IpMainId => ColumnType::Integer.def().null(),
            Self::Scanner => ColumnType::Text.def().null(),
            Self::Args => ColumnType::Text.def().null(),
            Self::Start => ColumnType::Text.def().null(),
            Self::Version => ColumnType::Text.def().null(),
            Self::XmlOutputVersion => ColumnType::Text.def().null(),
            Self::ScanInfo => ColumnType::Text.def().null(),
            Self::Verbose => ColumnType::Text.def().null(),
            Self::Debugging => ColumnType::Text.def().null(),
            Self::RunStats => ColumnType::Text.def().null(),
            Self::CreatedAt => ColumnType::TimestampWithTimeZone.def().null(),
            Self::UpdatedAt => ColumnType::TimestampWithTimeZone.def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::IpAddress => Entity::has_many(super::ip_address::Entity).into(),
            Self::IpMain => Entity::belongs_to(super::ip_main::Entity)
                .from(Column::IpMainId)
                .to(super::ip_main::Column::Id)
                .into(),
            Self::IpStats => Entity::has_many(super::ip_stats::Entity).into(),
            Self::IpTimes => Entity::has_many(super::ip_times::Entity).into(),
        }
    }
}

impl Related<super::ip_address::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::IpAddress.def()
    }
}

impl Related<super::ip_main::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::IpMain.def()
    }
}

impl Related<super::ip_stats::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::IpStats.def()
    }
}

impl Related<super::ip_times::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::IpTimes.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
