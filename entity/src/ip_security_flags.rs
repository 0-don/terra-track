//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "ip_security_flags"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub id: i64,
    pub ip_main_id: Option<i64>,
    pub is_spam_database: bool,
    pub is_adult_hosting: bool,
    pub is_hackers: bool,
    pub is_open_proxy: bool,
    pub is_tor: bool,
    pub is_proxy: bool,
    pub is_vpn: bool,
    pub is_abuser: bool,
    pub is_relay: bool,
    pub is_hosting: bool,
    pub is_bogon: bool,
    pub is_mobile: bool,
    pub is_datacenter: bool,
    pub service: Option<String>,
    pub created_at: Option<DateTimeWithTimeZone>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    IpMainId,
    IsSpamDatabase,
    IsAdultHosting,
    IsHackers,
    IsOpenProxy,
    IsTor,
    IsProxy,
    IsVpn,
    IsAbuser,
    IsRelay,
    IsHosting,
    IsBogon,
    IsMobile,
    IsDatacenter,
    Service,
    CreatedAt,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i64;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    IpMain,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::BigInteger.def(),
            Self::IpMainId => ColumnType::BigInteger.def().null(),
            Self::IsSpamDatabase => ColumnType::Boolean.def(),
            Self::IsAdultHosting => ColumnType::Boolean.def(),
            Self::IsHackers => ColumnType::Boolean.def(),
            Self::IsOpenProxy => ColumnType::Boolean.def(),
            Self::IsTor => ColumnType::Boolean.def(),
            Self::IsProxy => ColumnType::Boolean.def(),
            Self::IsVpn => ColumnType::Boolean.def(),
            Self::IsAbuser => ColumnType::Boolean.def(),
            Self::IsRelay => ColumnType::Boolean.def(),
            Self::IsHosting => ColumnType::Boolean.def(),
            Self::IsBogon => ColumnType::Boolean.def(),
            Self::IsMobile => ColumnType::Boolean.def(),
            Self::IsDatacenter => ColumnType::Boolean.def(),
            Self::Service => ColumnType::Text.def().null(),
            Self::CreatedAt => ColumnType::TimestampWithTimeZone.def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::IpMain => Entity::belongs_to(super::ip_main::Entity)
                .from(Column::IpMainId)
                .to(super::ip_main::Column::Id)
                .into(),
        }
    }
}

impl Related<super::ip_main::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::IpMain.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
    #[sea_orm(entity = "super::ip_main::Entity")]
    IpMain,
}
